variables:
  LLVM_VERSION_SUFFIX: '-custom'

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  timeoutInMinutes: 360

  steps:
  - script: |
      cat /proc/cpuinfo
      cat /proc/meminfo
    displayName: 'Info'

  - script: |
      sudo apt-get install -y swig3.0
    displayName: 'Install'
    
  - script: |
      mkdir $(Agent.BuildDirectory)/build
      cd $(Agent.BuildDirectory)/build
      cmake -DCMAKE_BUILD_TYPE=MinSizeRel\
            -DLLVM_VERSION_SUFFIX=${LLVM_VERSION_SUFFIX}\
            -DLLVM_PARALLEL_LINK_JOBS=1\
            -DLLVM_ENABLE_PROJECTS="clang;libcxx;lldb"\
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM"\
            -DLLVM_ENABLE_TERMINFO=FALSE\
            -DLLVM_ENABLE_LIBXML2=FORCE_ON\
            -DLLDB_RELOCATABLE_PYTHON=TRUE\
            -DLLDB_DISABLE_CURSES=TRUE\
            -DLLDB_DISABLE_LIBEDIT=TRUE\
            $(Build.SourcesDirectory)/llvm
      cat CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cmake --build $(Agent.BuildDirectory)/build --target lldb -- -j4
      cmake --build $(Agent.BuildDirectory)/build --target lldb-server -- -j4
    displayName: 'Build'

  - script: |
      cd $(Agent.BuildDirectory)/build
      zip -9 -y -r $(Build.ArtifactStagingDirectory)/lldb--x86_64-unknown-linux-gnu.zip\
        bin/lldb\
        bin/lldb-argdumper\
        bin/lldb-server\
        lib/liblldb.*\
        lib/python2.7/site-packages
    displayName: 'Zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb'
 
  # - script: |
  #     cmake --build $(Agent.BuildDirectory)/build --target check-lldb
  #   displayName: 'test'

  - script: |
      env
      cat $(Agent.BuildDirectory)/build/CMakeCache.txt
      find $(Agent.BuildDirectory)/build -type d
    displayName: 'On Failure'
    condition: failed()

############################################################

- job: Linux_aarch64
  pool:
    vmImage: 'Ubuntu 16.04'

  container: 'vadimcn/aarch64-unknown-linux-gnu:latest'

  timeoutInMinutes: 360

  steps:
  - script: |
      cat /proc/cpuinfo
      cat /proc/meminfo
    displayName: 'Info'

  - script: |
      sudo apt-get install -y swig3.0 g++
    displayName: 'Install'

  - script: |
      mkdir $(Agent.BuildDirectory)/build-host
      cd $(Agent.BuildDirectory)/build-host
      cmake -DCMAKE_BUILD_TYPE=MinSizeRel\
            -DLLVM_ENABLE_PROJECTS="clang"\
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM"\
            $(Build.SourcesDirectory)/llvm
    displayName: 'Configure:host'

  - script: |
      cmake --build $(Agent.BuildDirectory)/build-host --target llvm-tblgen -- -j4
      cmake --build $(Agent.BuildDirectory)/build-host --target clang-tblgen -- -j4
    displayName: 'Build:host'
    
  - script: |
      mkdir $(Agent.BuildDirectory)/build
      cd $(Agent.BuildDirectory)/build
      cmake -DCMAKE_BUILD_TYPE=MinSizeRel\
            -DCMAKE_SYSTEM_NAME=Linux\
            -DCMAKE_SYSTEM_PROCESSOR=aarch64\
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc\
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++\
            -DLLVM_TARGET_ARCH=aarch64\
            -DLLVM_TABLEGEN=$(Agent.BuildDirectory)/build-host/bin/llvm-tblgen\
            -DCLANG_TABLEGEN=$(Agent.BuildDirectory)/build-host/bin/clang-tblgen\
            -DLLVM_VERSION_SUFFIX=${LLVM_VERSION_SUFFIX}\
            -DLLVM_PARALLEL_LINK_JOBS=1\
            -DLLVM_ENABLE_PROJECTS="clang;libcxx;lldb"\
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM"\
            -DLLVM_ENABLE_TERMINFO=FALSE\
            -DLLVM_ENABLE_LIBXML2=FORCE_ON\
            -DLLDB_RELOCATABLE_PYTHON=TRUE\
            -DLLDB_DISABLE_CURSES=TRUE\
            -DLLDB_DISABLE_LIBEDIT=TRUE\
            $(Build.SourcesDirectory)/llvm
      cat CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cmake --build $(Agent.BuildDirectory)/build --target lldb -- -j4
      cmake --build $(Agent.BuildDirectory)/build --target lldb-server -- -j4
    displayName: 'Build'

  - script: |
      cd $(Agent.BuildDirectory)/build
      zip -9 -y -r $(Build.ArtifactStagingDirectory)/lldb--aarch64-unknown-linux-gnu.zip\
        bin/lldb\
        bin/lldb-argdumper\
        bin/lldb-server\
        lib/liblldb.*\
        lib/python2.7/site-packages
    displayName: 'Zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb'
 
  # - script: |
  #     cmake --build $(Agent.BuildDirectory)/build --target check-lldb
  #   displayName: 'test'

  - script: |
      env
      cat $(Agent.BuildDirectory)/build-host/CMakeCache.txt
      cat $(Agent.BuildDirectory)/build/CMakeCache.txt
      find $(Agent.BuildDirectory) -type d
    displayName: 'On Failure'
    condition: failed()

############################################################

- job: OSX
  pool:
    vmImage: 'macOS 10.13'

  timeoutInMinutes: 360

  steps:
  - script: |
      sysctl -a
    displayName: 'Info'

  - script: |
      brew install pcre
      mkdir -p $(Agent.BuildDirectory)/swig
      curl -L https://sourceforge.net/projects/swig/files/swig/swig-3.0.12/swig-3.0.12.tar.gz -o $(Agent.BuildDirectory)/swig-3.0.12.tar.gz
      cd $(Agent.BuildDirectory)
      tar xf swig-3.0.12.tar.gz
      cd $(Agent.BuildDirectory)/swig-3.0.12
      ./configure --prefix $(Agent.BuildDirectory)/swig
      make -j
      make install
    displayName: 'Install'
    
  - script: |
      mkdir $(Agent.BuildDirectory)/build
      cd $(Agent.BuildDirectory)/build
      cmake -DCMAKE_BUILD_TYPE=MinSizeRel\
            -DLLVM_VERSION_SUFFIX=${LLVM_VERSION_SUFFIX}\
            -DLLVM_PARALLEL_LINK_JOBS=1\
            -DLLVM_ENABLE_PROJECTS="clang;libcxx;lldb"\
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM"\
            -DLLVM_ENABLE_TERMINFO=FALSE\
            -DLLVM_ENABLE_LIBXML2=ON\
            -DLLDB_RELOCATABLE_PYTHON=TRUE\
            -DLLDB_DISABLE_CURSES=TRUE\
            -DLLDB_DISABLE_LIBEDIT=TRUE\
            -DLLDB_USE_SYSTEM_DEBUGSERVER=TRUE\
            -DSWIG_EXECUTABLE=$(Agent.BuildDirectory)/swig/bin/swig\
            -DSWIG_DIR=$(Agent.BuildDirectory)/swig/share/swig/swig-3.0.12\
            $(Build.SourcesDirectory)/llvm
      cat CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cmake --build $(Agent.BuildDirectory)/build --target lldb -- -j4
      cp $XCODE_10_DEVELOPER_DIR/../SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver $(Agent.BuildDirectory)/build/bin/debugserver
    displayName: 'Build'

  - script: |
      cd $(Agent.BuildDirectory)/build
      zip -9 -y -r $(Build.ArtifactStagingDirectory)/lldb--x86_64-apple-darwin.zip\
        bin/lldb\
        bin/lldb.dSYM\
        bin/lldb-argdumper\
        bin/lldb-argdumper.dSYM\
        bin/debugserver\
        lib/liblldb.*\
        lib/liblldb.*.dSYM\
        lib/python2.7/site-packages
    displayName: 'Zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb'

  # - script: |
  #     cmake --build $(Agent.BuildDirectory)/build --target check-lldb
  #   displayName: 'test'

  - script: |
      env
      cat $(Agent.BuildDirectory)/build/CMakeCache.txt
      find $(Agent.BuildDirectory)/build -type d
    displayName: 'On Failure'
    condition: failed()

############################################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'
    
  timeoutInMinutes: 360

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      addToPath: true
      architecture: 'x64'

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      choco install swig --version 3.0.12 
      choco install ninja
      choco install zip
    displayName: 'Install'

  - script: |
      git clone https://github.com/robotology-dependencies/libxml2-cmake-buildsystem.git $(Build.SourcesDirectory)/libxml2
      mkdir $(Agent.BuildDirectory)\build_xml2
      cd $(Agent.BuildDirectory)\build_xml2
      cmake -GNinja^
            -DCMAKE_BUILD_TYPE=MinSizeRel^
            -DCMAKE_C_COMPILER=cl^
            -DCMAKE_CXX_COMPILER=cl^
            -DCMAKE_INSTALL_PREFIX=$(Agent.BuildDirectory)\libxml2^
            -DBUILD_SHARED_LIBS=OFF^
            -DLIBXML2_WITH_SAX1=ON^
            -DLIBXML2_WITH_THREADS=ON^
            -DLIBXML2_WITH_FEXCEPTIONS=OFF^
            -DLIBXML2_WITH_FTP=OFF^
            -DLIBXML2_WITH_HISTORY=OFF^
            -DLIBXML2_WITH_HTML=OFF^
            -DLIBXML2_WITH_HTTP=OFF^
            -DLIBXML2_WITH_ICONV=OFF^
            -DLIBXML2_WITH_ICU=OFF^
            -DLIBXML2_WITH_ISO8859X=OFF^
            -DLIBXML2_WITH_LEGACY=OFF^
            -DLIBXML2_WITH_MEM_DEBUG=OFF^
            -DLIBXML2_WITH_MINIMUM=OFF^
            -DLIBXML2_WITH_OUTPUT=OFF^
            -DLIBXML2_WITH_PATTERN=OFF^
            -DLIBXML2_WITH_PUSH=OFF^
            -DLIBXML2_WITH_READER=OFF^
            -DLIBXML2_WITH_REGEXPS=OFF^
            -DLIBXML2_WITH_RUN_DEBUG=OFF^
            -DLIBXML2_WITH_SCHEMAS=OFF^
            -DLIBXML2_WITH_SCHEMATRON=OFF^
            -DLIBXML2_WITH_THREAD_ALLOC=OFF^
            -DLIBXML2_WITH_TREE=OFF^
            -DLIBXML2_WITH_VALID=OFF^
            -DLIBXML2_WITH_WRITER=OFF^
            -DLIBXML2_WITH_XINCLUDE=OFF^
            -DLIBXML2_WITH_XPATH=OFF^
            -DLIBXML2_WITH_XPTR=OFF^
            -DLIBXML2_WITH_MODULES=OFF^
            -DLIBXML2_WITH_ZLIB=OFF^
            -DLIBXML2_WITH_LZMA=OFF^
            $(Build.SourcesDirectory)/libxml2
      cmake --build . --target install
    displayName: 'Build LibXML2'

  - script: |
      mkdir $(Agent.BuildDirectory)\build
      cd $(Agent.BuildDirectory)\build
      cmake -GNinja^
            -DCMAKE_BUILD_TYPE=MinSizeRel^
            -DLLVM_VERSION_SUFFIX=${LLVM_VERSION_SUFFIX}^
            -DCMAKE_C_COMPILER=cl^
            -DCMAKE_CXX_COMPILER=cl^
            -DLLVM_PARALLEL_LINK_JOBS=1^
            -DLLVM_ENABLE_PROJECTS="clang;libcxx;lldb"^
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM"^
            -DLLVM_ENABLE_DIA_SDK=TRUE^
            -DPYTHON_HOME=%USEPYTHONVERSION_PYTHONLOCATION%^
            -DLLVM_ENABLE_TERMINFO=FALSE^
            -DLLDB_RELOCATABLE_PYTHON=TRUE^
            -DLLDB_DISABLE_CURSES=TRUE^
            -DLLDB_DISABLE_LIBEDIT=TRUE^
            -DPYTHON_DEBUG_EXE=%USEPYTHONVERSION_PYTHONLOCATION%\python.exe^
            -DPYTHON_DEBUG_DLL=%USEPYTHONVERSION_PYTHONLOCATION%\python36.dll^
            -DPYTHON_DEBUG_LIB=%USEPYTHONVERSION_PYTHONLOCATION%\libs\python36.lib^
            -DLLVM_ENABLE_LIBXML2=ON^
            -DLIBXML2_FOUND=1^
            -DLIBXML2_VERSION_STRING=2.9.3^
            -DLIBXML2_INCLUDE_DIR=$(Agent.BuildDirectory)\libxml2\include\libxml2^
            -DLIBXML2_LIBRARIES=$(Agent.BuildDirectory)\libxml2\lib\xml2.lib^
            $(Build.SourcesDirectory)/llvm
      type CMakeCache.txt
    displayName: 'Configure'

  - script: |
      cmake --build $(Agent.BuildDirectory)/build --target lldb -- -j4
    displayName: 'Build'

  - script: |
      cd $(Agent.BuildDirectory)/build
      zip -9 -r $(Build.ArtifactStagingDirectory)/lldb--x86_64-pc-windows-msvc.zip^
        bin/lldb.*^
        bin/lldb-argdumper.*^
        bin/liblldb.*^
        lib/liblldb.*^
        lib/site-packages
    displayName: 'Zip'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb'

  # - script: |
  #     cmake --build $(Agent.BuildDirectory)/build --target check-lldb
  #   displayName: 'test'

  - script: |
      set
      type $(Agent.BuildDirectory)\build\CMakeCache.txt
      tree $(Agent.BuildDirectory)\build
    displayName: 'On Failure'
    condition: failed()
