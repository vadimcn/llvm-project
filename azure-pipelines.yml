variables:
  cachePrefix: 'A'

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  container: 'vadimcn/linux-builder:latest'

  strategy:
    matrix:
      x86_64:
        Triple: 'x86_64-linux-gnu'      
      arm:
        Triple: 'arm-linux-gnueabihf'      
      aarch64:
        Triple: 'aarch64-linux-gnu'      

  timeoutInMinutes: 360

  steps:
  - script: |
      cat /proc/cpuinfo
      cat /proc/meminfo
    displayName: 'Info'

  - task: Cache@2
    inputs:
      key: $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.SourceVersion)
        $(cachePrefix) | $(Agent.OS) | $(Triple)
      path: $(Agent.BuildDirectory)/.ccache
      continueOnError: true
    displayName: CCache
    condition: always()

  - script: |
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(Build.SourcesDirectory)\
        -DCMAKE_BUILD_TYPE=MinSizeRel\
        -DCMAKE_TOOLCHAIN_FILE=toolchain-$(Triple).cmake\
        -DRELEASE_PACKAGE=TRUE
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
      cat $(Agent.BuildDirectory)/lldb/CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--$(Triple)'

  - script: |
      env
      find $(Agent.BuildDirectory) -type d
      cat $(Agent.BuildDirectory)/CMakeCache.txt
      cat $(Agent.BuildDirectory)/lldb/CMakeCache.txt
    displayName: 'On Failure'
    condition: failed()

############################################################

- job: OSX
  pool:
    vmImage: 'macOS-10.14'

  timeoutInMinutes: 360

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
      architecture: 'x64'

  - script: |
      sysctl -a
    displayName: 'Info'

  - script: |
      brew install pcre automake ninja ccache
    displayName: 'Install tools'

  - task: Cache@2
    inputs:
      key: $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.SourceVersion)
        $(cachePrefix) | $(Agent.OS) | $(Triple)
      path: $(Agent.BuildDirectory)/.ccache
      continueOnError: true
    displayName: CCache
    condition: always()

  - script: |
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(Build.SourcesDirectory)\
         -DCMAKE_BUILD_TYPE=RelWithDebInfo\
         -DRELEASE_PACKAGE=TRUE
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
      cat $(Agent.BuildDirectory)/lldb/CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cp $XCODE_10_DEVELOPER_DIR/../SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver $(Agent.BuildDirectory)/lldb/bin/debugserver
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
 
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--x86_64-apple-darwin'

  - script: |
      env
      find $(Agent.BuildDirectory) -type d
      cat $(Agent.BuildDirectory)/CMakeCache.txt
      cat $(Agent.BuildDirectory)/lldb/CMakeCache.txt
    displayName: 'On Failure'
    condition: failed()

############################################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'
    
  timeoutInMinutes: 360

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
      architecture: 'x64'

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      choco install zip
      choco install ninja
      choco install msys2 --params "/NoUpdate"
      C:\tools\msys64\usr\bin\pacman --noconfirm -S automake autoconf 
      C:\tools\msys64\usr\bin\pacman --noconfirm -S pcre-devel bison sed
    displayName: 'Install tools'

  - script: |
      set PATH=C:\tools\msys64\usr\bin;%PATH%
      set CPATH=C:\tools\msys64\usr\include
      set LIBRARY_PATH=C:\tools\msys64\usr\lib
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(Build.SourcesDirectory)^
         -DCMAKE_BUILD_TYPE=RelWithDebInfo^
         -DRELEASE_PACKAGE=TRUE
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
      type $(Agent.BuildDirectory)\lldb\CMakeCache.txt
    displayName: 'Configure'
    
  - script: |
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--x86_64-windows-msvc'

  - script: |
      set
      tree /a $(Agent.BuildDirectory)
      type $(Agent.BuildDirectory)\CMakeCache.txt
      type $(Agent.BuildDirectory)\lldb\CMakeCache.txt
    displayName: 'On Failure'
    condition: failed()
