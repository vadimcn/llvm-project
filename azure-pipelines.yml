variables:
  cachePrefix: 'B'
  buildTools: $(Agent.BuildDirectory)/build-tools
  llvmProject: $(Build.SourcesDirectory)/llvm-project
  SCCACHE: sccache
  SCCACHE_DIR: $(Agent.BuildDirectory)/sccache
  SCCACHE_IDLE_TIMEOUT: 60

resources:
  repositories:
  - repository: build-tools-linux
    type: github
    endpoint: github.com_vadimcn
    name: vadimcn/build-tools
    ref: linux
  - repository: build-tools-darwin
    type: github
    endpoint: github.com_vadimcn
    name: vadimcn/build-tools
    ref: darwin
  - repository: build-tools-windows
    type: github
    endpoint: github.com_vadimcn
    name: vadimcn/build-tools
    ref: windows

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'

  container: 'vadimcn/linux-builder:latest'

  strategy:
    matrix:
      x86_64:
        Triple: 'x86_64-linux-gnu'
      arm:
        Triple: 'arm-linux-gnueabihf'
      aarch64:
        Triple: 'aarch64-linux-gnu'

  timeoutInMinutes: 360

  steps:
  - checkout: self
    submodules: true
    fetchDepth: 1

  - checkout: build-tools-linux
    path: build-tools
    submodules: true
    lfs: true
    fetchDepth: 1

  - script: |
      echo "##vso[task.prependpath]$(buildTools)/bin"
    displayName: Update path

  - task: Cache@2
    inputs:
      key: $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | $(Agent.OS) | $(Triple)
      path: $(SCCACHE_DIR)
      continueOnError: true
    displayName: SCCache
    condition: always()

  - script: |
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(llvmProject)\
        -DCMAKE_BUILD_TYPE=MinSizeRel\
        -DCMAKE_TOOLCHAIN_FILE=toolchain-$(Triple).cmake\
        -DCMAKE_C_COMPILER_LAUNCHER=$(SCCACHE)\
        -DCMAKE_CXX_COMPILER_LAUNCHER=$(SCCACHE)\
        -DRELEASE_PACKAGE=TRUE\
        -DPYTHON_STANDALONE=$(buildTools)/python
    displayName: 'Configure'

  - script: |
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
    displayName: 'Build Dependencies'
    
  - script: |
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--$(Triple)'

  - script: |
      cd $(Agent.BuildDirectory)
      cat /proc/cpuinfo > system.log
      cat /proc/meminfo >> system.log
      env > env.log
      find $(Agent.BuildDirectory) -type d > tree.log
      zip --recurse-patterns $(Agent.BuildDirectory)/$(Triple).zip "*.log" "CMakeCache.txt"
      echo "##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)/$(Triple).zip"
    displayName: 'Logs'
    condition: always()    

############################################################

- job: OSX
  pool:
    vmImage: 'macOS-10.14'

  variables:
    Triple: 'x86_64-apple-darwin'

  timeoutInMinutes: 360

  steps:
  - checkout: self
    submodules: true
    fetchDepth: 1

  - checkout: build-tools-darwin
    path: build-tools
    submodules: true
    lfs: true
    fetchDepth: 1

  - script: |
      echo "##vso[task.prependpath]$(buildTools)/bin"
    displayName: Update path    

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
      architecture: 'x64'

  - script: |
      brew install pcre automake ninja pkg-config
    displayName: 'Install tools'

  - task: Cache@2
    inputs:
      key: $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | $(Agent.OS) | $(Triple)
      path: $(SCCACHE_DIR)
      continueOnError: true
    displayName: SCCache
    condition: always()

  - script: |
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(llvmProject)\
         -DCMAKE_BUILD_TYPE=MinSizeRel\
         -DCMAKE_C_COMPILER_LAUNCHER=$(SCCACHE)\
         -DCMAKE_CXX_COMPILER_LAUNCHER=$(SCCACHE)\
         -DRELEASE_PACKAGE=TRUE\
         -DPYTHON_STANDALONE=$(buildTools)/python
    displayName: 'Configure'

  - script: |
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
    displayName: 'Build Dependencies'

  - script: |
      cp $XCODE_10_DEVELOPER_DIR/../SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver $(Agent.BuildDirectory)/lldb/bin/debugserver
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
 
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--x86_64-apple-darwin'

  - script: |
      cd $(Agent.BuildDirectory)
      sysctl -a > system.log
      env > env.log
      find $(Agent.BuildDirectory) -type d > tree.log
      zip --recurse-patterns $(Agent.BuildDirectory)/$(Triple).zip "*.log" "CMakeCache.txt"
      echo "##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)/$(Triple).zip"
    displayName: 'Logs'
    condition: always()

############################################################

- job: Windows
  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    Triple: 'x86_64-windows-msvc'
    
  timeoutInMinutes: 360

  steps:
  - checkout: self
    submodules: true
    fetchDepth: 1

  - checkout: build-tools-windows
    path: build-tools
    submodules: true
    lfs: true
    fetchDepth: 1

  - script: |
      echo vso[task.prependpath]$(buildTools)/bin
      echo ##vso[task.prependpath]$(buildTools)/bin
    displayName: Update path    

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
      architecture: 'x64'

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      choco install msys2 --params "/NoUpdate"
      C:\tools\msys64\usr\bin\pacman --noconfirm -S automake autoconf 
      C:\tools\msys64\usr\bin\pacman --noconfirm -S pcre-devel bison sed
      echo ##vso[task.prependpath]C:\tools\msys64\usr\bin
      echo ##vso[task.setvariable variable=CPATH;]C:\tools\msys64\usr\include
      echo ##vso[task.setvariable variable=LIBRARY_PATH;]C:\tools\msys64\usr\lib
    displayName: 'Install tools'

  - task: Cache@2
    inputs:
      key: $(cachePrefix) | $(Agent.OS) | $(Triple) | $(Build.BuildId)
      restoreKeys: |
        $(cachePrefix) | $(Agent.OS) | $(Triple)
      path: $(SCCACHE_DIR)
      continueOnError: true
    displayName: SCCache
    condition: always()

  - script: |
      git remote set-url origin local
      cd $(Agent.BuildDirectory) && cmake -GNinja $(llvmProject)^
         -DCMAKE_BUILD_TYPE=MinSizeRel^
         -DCMAKE_C_COMPILER_LAUNCHER=$(SCCACHE)^
         -DCMAKE_CXX_COMPILER_LAUNCHER=$(SCCACHE)^
         -DRELEASE_PACKAGE=TRUE^
         -DPYTHON_STANDALONE=$(buildTools)/python
    displayName: 'Configure'

  - script: |
      cmake --build $(Agent.BuildDirectory) --target lldb-configure -- -v
    displayName: 'Build Dependencies'

  - script: |
      cmake --build $(Agent.BuildDirectory) --target package_lldb -- -v
    displayName: 'Build'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)'
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'lldb--x86_64-windows-msvc'

  - script: |
      cd $(Agent.BuildDirectory)
      set > env.log
      tree /a > tree.log
      zip --recurse-patterns $(Agent.BuildDirectory)\$(Triple).zip "*.log" "CMakeCache.txt"
      echo ##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)\$(Triple).zip
    displayName: 'Logs'
    condition: always()
